[{"content":"项目背景 很早以前就想做的，理想中是一个监控若干个指定的微博的内容变化，收集所有内容用于素材库、数据分析、自媒体创作等等。类似的需求还有收集小红书、百家号、头条号、推特等等等不同的内容平台，脑海里许多项目都需要靠数据收集+自动化实现，这些都先立个flag，后续肯定会做的。\n需求收集 先做个简单的需求收集，我想要实现以下的功能\n爬取微博超话 爬取博主主页 爬取搜索关键词/高级搜索的页面 定时监控数据变化，手动或自动进行增量更新 更新后进行消息通知 这些是爬虫侧做的数据收集相关需求，后续我还想有\nUI界面 数据加工、创作 数据分发到各个平台 总之就是类似写博客一样，通过一定的手段实现一次创作，多平台发布。UI界面相关的主要是实现对脚本启动、停止以及数据监控、展示等等比较简单的前端，不会花时间过度设计，够用就行。\n那么，接下来就是研究一下目前有没有合适的开源库可以实现以上部分功能了，如果有合适的轮子可以复用，岂不妙哉。\n开源库调研 dhwark/weibo_img_Crawler: 微博图片异步爬虫 看了下源码只有图片下载，没有其它内容，意义不是很大\ndataabc/weibo-crawler: 新浪微博爬虫 没有超话爬取，其它好像都有，但需要改造，研究一下\nIshtarTang/weibo_spider-scrapy 用scrapy写的微博爬虫，可以研究一下\nNanmiCoder/MediaCrawler 原理是非逆向方式用Playwright得到登录成功后的上下文浏览器环境，然后执行JS获取加密参数，拿加密参数去正常请求，不需要复现加密JS代码。\n由于热度太高，作者已经删库，还好从其它方式获取到源码，可以研究改进一下\n","permalink":"https://destinokm.github.io/posts/tech/%E5%BE%AE%E5%8D%9A%E7%88%AC%E8%99%AB/","summary":"为了收集好看的小姐姐而启动的项目","title":"微博爬虫"},{"content":"记录\n","permalink":"https://destinokm.github.io/about/","summary":"记录","title":"🙋🏻‍♂️关于"},{"content":"手动安装 1 2 3 4 5 6 7 8 9 10 11 sudo apt install zsh sh -c \u0026#34;$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)\u0026#34; # zinit bash -c \u0026#34;$(curl --fail --show-error --silent --location https://raw.githubusercontent.com/zdharma-continuum/zinit/HEAD/scripts/install.sh)\u0026#34; sudo chsh ubuntu # 修改~/.zshrc ZSH_THEME=\u0026#34;afowler\u0026#34; 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 # Load Oh MY Zsh Plugins #git alias（推荐） zinit snippet OMZ::plugins/git/git.plugin.zsh #解压 zinit snippet OMZ::plugins/extract/extract.plugin.zsh #history格式化及alias zinit snippet OMZ::lib/history.zsh #如果命令不存在，会提醒你可能缺失的依赖 zinit snippet OMZ::plugins/command-not-found/command-not-found.plugin.zsh #跳转目录 #sublime alias zinit snippet OMZ::plugins/sublime/sublime.plugin.zsh # Zinit Ice Load #p10k主题 zinit ice depth=1; zinit light romkatv/powerlevel10k #命令高亮 zinit ice lucid wait=\u0026#39;0\u0026#39; atinit=\u0026#39;zpcompinit\u0026#39;; zinit light zdharma/fast-syntax-highlighting #命令补全建议 zinit ice wait lucid atload\u0026#39;_zsh_autosuggest_start\u0026#39;; zinit light zsh-users/zsh-autosuggestions #命令补全 zinit ice lucid wait=\u0026#39;0\u0026#39;; zinit light zsh-users/zsh-completions #Alias提醒 zinit ice lucid wait=\u0026#39;0\u0026#39;; zinit light djui/alias-tips # Export export HOMEBREW_BOTTLE_DOMAIN=\u0026#34;https://mirrors.ustc.edu.cn/homebrew-bottles\u0026#34; # Alias alias ls=\u0026#34;ls --color\u0026#34; alias ll=\u0026#34;ls -lh --color\u0026#34; # p10k主题配置 # To customize prompt, run `p10k configure` or edit ~/.p10k.zsh. [[ ! -f ~/.p10k.zsh ]] || source ~/.p10k.zsh 1 2 3 4 5 6 7 8 9 # 历史记录保存 export HISTFILE=~/.zsh_history export HISTSIZE=10000 export SAVEHIST=10000 # 手动安装自动补全 source ~/.zsh/zsh-autosuggestions/zsh-autosuggestions.zsh # 再装个autojump autojump 根据autojump github安装\nPS: centos安装autojump-zsh\n一键脚本 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 #!/bin/bash # Set the ZSH_CUSTOM environment variable export ZSH_CUSTOM=$HOME/.oh-my-zsh/custom # Install Zsh sudo yum install -y zsh # Install Oh My Zsh git clone --depth=1 https://github.com/ohmyzsh/ohmyzsh.git ~/.oh-my-zsh # Install autojump sudo yum install -y autojump-zsh # Install zsh-autosuggestions and zsh-completions git clone https://github.com/zsh-users/zsh-autosuggestions $ZSH_CUSTOM/plugins/zsh-autosuggestions git clone https://github.com/zsh-users/zsh-completions $ZSH_CUSTOM/plugins/zsh-completions # Install zsh-syntax-highlighting git clone https://github.com/zsh-users/zsh-syntax-highlighting.git $ZSH_CUSTOM/plugins/zsh-syntax-highlighting # Install fzf git clone https://github.com/junegunn/fzf.git ~/.fzf ~/.fzf/install # Install z git clone https://github.com/rupa/z.git $ZSH_CUSTOM/plugins/z # Install fasd sudo yum install -y fasd # Replace GitHub remote URLs with Tsinghua mirrors sed -i \u0026#39;s/github.com/mirrors.tuna.tsinghua.edu.cn\\/github/g\u0026#39; $ZSH_CUSTOM/plugins/git/git.plugin.zsh # Configure Zsh sed -i \u0026#39;s/ZSH_THEME=\u0026#34;robbyrussell\u0026#34;/ZSH_THEME=\u0026#34;agnoster\u0026#34;/g\u0026#39; ~/.zshrc sed -i \u0026#39;s/plugins=(git)/plugins=(git autojump zsh-syntax-highlighting zsh-autosuggestions zsh-completions z fasd)/g\u0026#39; ~/.zshrc # Set Zsh as the default shell chsh -s $(which zsh) # Source the changes source ~/.zshrc ","permalink":"https://destinokm.github.io/posts/tech/%E5%91%BD%E4%BB%A4%E8%A1%8Czsh/","summary":"ZSH配置","title":"命令行ZSH"},{"content":"1、主题 采用PaperMod, 挺简洁的\n2、时间配置 看官方文档有如下时间设置\ndate lastmod publishDate 其中lastmod和publishDate在PaperMod中只显示在html\u0026lt;head\u0026gt;的meta标签中, 具体可看其源码 themes\\PaperMod\\layouts\\partials\\post_meta.html 我想要的结果是, 如果文档配置了发布日期publishDate, 则date优先取该值, 否则, 取gitinfo的提交日期, 最后才取lastmod, 即文档改动日期\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 frontmatter: date: - date - publishDate - :git lastmod: - lastmod - :git - :fileModTime publishDate: - publishDate - :defalut 其中配置的这个.git, 要使其生效需要在checkout时配置fetch-depth: 0拉取所有历史记录, 还要配置git config --global core.quotePath false使中文路径的文章生效, 参考解决Hugo文章路径含中文时无法获取GitInfo的问题\n3、配置文件 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 baseURL: https://destinokm.github.io languageCode: zh-cn # en-us title: 创果自留地 theme: PaperMod # 主题名字，和themes文件夹下的一致 enableInlineShortcodes: true #允许内联短码 enableEmoji: true # 允许使用 Emoji 表情，建议 true enableRobotsTXT: true # 允许爬虫抓取到搜索引擎，建议 true hasCJKLanguage: true # 自动检测是否包含 中文日文韩文 如果文章中使用了很多中文引号的话可以开启 buildDrafts: false buildFuture: false buildExpired: false #googleAnalytics: UA-123-45 # 谷歌统计 paginate: 15 # 每页显示的文章数 minify: disableXML: true # minifyOutput: true permalinks: #浏览器链接显示方式 post: \u0026#34;/:title/\u0026#34; # post: \u0026#34;/:year/:month/:day/:title/\u0026#34; defaultContentLanguage: zh # 最顶部首先展示的语言页面 defaultContentLanguageInSubdir: false frontmatter: date: - date - publishDate - :git lastmod: - lastmod - :git - :fileModTime publishDate: - publishDate - :defalut enableGitInfo: true languages: zh: languageName: \u0026#34;中文\u0026#34; # contentDir: content/chinese weight: 1 menu: main: - identifier: search name: 🔍搜索 url: search weight: 1 - identifier: home name: 🏠主页 url: / weight: 2 - identifier: posts name: 📚文章 url: posts/tech weight: 3 - identifier: archives name: ⏱时间轴 url: archives/ weight: 20 - identifier: tags name: 🔖标签 url: tags weight: 40 - identifier: about name: 🙋🏻‍♂️关于 url: about weight: 50 - identifier: links name: 🤝友链 url: links weight: 60 outputs: home: - HTML - RSS - JSON params: profileMode: enabled: true title: (〃\u0026#39;▽\u0026#39;〃) subtitle: \u0026#34;🧨创果文化自留地👇联系方式\u0026#34; imageUrl: \u0026#34;img/profile.jpg\u0026#34; #图片放在static/img/profile.jpg imageTitle: imageWidth: 150 imageHeight: 150 buttons: - name: 👨🏻‍💻记录 url: posts/tech - name: 📕阅读 url: posts/read - name: 🏖生活 url: posts/life env: production # to enable google analytics, opengraph, twitter-cards and schema. # description: \u0026#34;这是一个纯粹的博客......\u0026#34; author: Destino74 # author: [\u0026#34;Me\u0026#34;, \u0026#34;You\u0026#34;] # multiple authors defaultTheme: auto # defaultTheme: light or dark disableThemeToggle: false DateFormat: \u0026#34;2006-01-02 15:04\u0026#34; ShowShareButtons: false ShowReadingTime: true # disableSpecialistPost: true displayFullLangName: true ShowPostNavLinks: true ShowBreadCrumbs: true ShowCodeCopyButtons: true hideFooter: false # 隐藏页脚 ShowWordCount: true VisitCount: true ShowLastMod: true #显示文章更新时间 ShowToc: true # 显示目录 TocOpen: false # 自动展开目录 comments: true socialIcons: - name: github url: \u0026#34;https://github.com/destinokm\u0026#34; # - name: QQ # url: \u0026#34;img/qq.png\u0026#34; # - name: WeChat # url: \u0026#34;img/wechat.png\u0026#34; - name: email url: \u0026#34;mailto:402407061@qq.com\u0026#34; - name: RSS url: \u0026#34;index.xml\u0026#34; # editPost: # URL: \u0026#34;https://github.com/adityatelange/hugo-PaperMod/tree/exampleSite/content\u0026#34; # Text: \u0026#34;Suggest Changes\u0026#34; # edit text # appendFilePath: true # to append file path to Edit link label: text: \u0026#34;创果自留地\u0026#34; icon: \u0026#34;img/profile.jpg\u0026#34; iconHeight: 35 # analytics: #谷歌分析 # google: # SiteVerificationTag: \u0026#34;XYZabc\u0026#34; assets: favicon: \u0026#34;img/profile.jpg\u0026#34; favicon16x16: \u0026#34;img/profile.jpg\u0026#34; favicon32x32: \u0026#34;img/profile.jpg\u0026#34; apple_touch_icon: \u0026#34;img/profile.jpg\u0026#34; safari_pinned_tab: \u0026#34;img/profile.jpg\u0026#34; # cover: # hidden: true # hide everywhere but not in structured data # hiddenInList: true # hide on list pages and home # hiddenInSingle: true # hide on single page fuseOpts: isCaseSensitive: false shouldSort: true location: 0 distance: 1000 threshold: 1 minMatchCharLength: 0 keys: [\u0026#34;title\u0026#34;, \u0026#34;permalink\u0026#34;, \u0026#34;summary\u0026#34;] twikoo: version: 1.4.11 taxonomies: category: categories tag: tags series: series markup: goldmark: renderer: unsafe: true # HUGO 默认转义 Markdown 文件中的 HTML 代码，如需开启的话 highlight: # anchorLineNos: true codeFences: true guessSyntax: true lineNos: true # noClasses: false # style: monokai style: darcula # codeFences：代码围栏功能，这个功能一般都要设为 true 的，不然很难看，就是干巴巴的-代码文字，没有颜色。 # guessSyntax：猜测语法，这个功能建议设置为 true, 如果你没有设置要显示的语言则会自动匹配。 # hl_Lines：高亮的行号，一般这个不设置，因为每个代码块我们可能希望让高亮的地方不一样。 # lineNoStart：行号从编号几开始，一般从 1 开始。 # lineNos：是否显示行号，我比较喜欢显示，所以我设置的为 true. # lineNumbersInTable：使用表来格式化行号和代码,而不是 标签。这个属性一般设置为 true. # noClasses：使用 class 标签，而不是内嵌的内联样式 privacy: vimeo: disabled: false simple: true twitter: disabled: false enableDNT: true simple: true instagram: disabled: false simple: true youtube: disabled: false privacyEnhanced: true services: instagram: disableInlineCSS: true twitter: disableInlineCSS: true 4、待做 修复:git时间时区不对 评论系统 统计工具 ","permalink":"https://destinokm.github.io/posts/tech/hugo%E9%85%8D%E7%BD%AE/","summary":"Hugo配置","title":"Hugo配置"},{"content":"优点 Obsidian作为写笔记的客户端十分优秀, 插件很丰富, PC端配置Obsidian Git后可实现自动上传 通过配置Obsidian笔记的文档属性，在hugo构建时解析draft属性, 可以实现隐私设置, 部分公开或隐藏 结合Obsidian Github库的Github Action实现提交时自动触发提取待发布文章, 同步到Github Page，Runner执行一次大约20秒，不算慢 生成的全静态文件，无SQL解析速度很快 Github Action配置 检出仓库obsidian最近1次提交的历史记录，检出路径设为obsidian 检出仓库hugoBlog所有记录，检出路径设为hugoBlog 运行python脚本，遍历检出的记录文件，检测是否包含draft:false, 如果是的话, 将该文件复制到hugoBlog的content/posts文件夹下 在hugoBlog目录下运行hugo, 构建静态文件 使用 GitHub Pages 的官方 action，用于部署静态网站到 GitHub Pages github action配置文件yml如下\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 name: Build and Deploy Hugo Blog on: push: branches: - main # 触发条件：当 main 分支有代码推送时触发 jobs: build_and_deploy: runs-on: ubuntu-latest steps: - name: Checkout current repository uses: actions/checkout@v4 with: fetch-depth: 1 # 拉取最近1次提交的历史记录 path: obsidian - name: Checkout Hugo Blog repository uses: actions/checkout@v4 with: repository: destinokm/hugoBlog # 仓库地址，例如: username/hugoBlog path: hugoBlog # 仓库的检出路径 ref: \u0026#39;main\u0026#39; token: ${{ secrets.ACCESS_TOKEN }} - name: Setup Themes run: git submodule update --init --recursive working-directory: hugoBlog # 在 hugoBlog 目录下运行命令 - name: Setup Hugo uses: peaceiris/actions-hugo@v2 # 使用 Hugo 的官方 action，用于安装 Hugo - name: Run Python script to copy draft posts run: | cp obsidian/.scripts/copy_draft_posts.py . python copy_draft_posts.py working-directory: ${{ github.workspace }} - name: Commit and push posts to hugoBlog run: | git config --global user.email \u0026#34;destinokami@gmail.com\u0026#34; git config --global user.name \u0026#34;github action\u0026#34; git add . git commit -m \u0026#34;Update posts\u0026#34; git push origin main working-directory: hugoBlog # 在 hugoBlog 目录下运行命令 - name: Build Hugo site run: hugo working-directory: hugoBlog # 在 hugoBlog 目录下运行 Hugo 命令 - name: Deploy to GitHub Pages uses: peaceiris/actions-gh-pages@v3 with: personal_token: ${{ secrets.ACCESS_TOKEN }} external_repository: destinokm/destinokm.github.io publish_dir: ./hugoBlog/public publish_branch: master # GitHub Pages 的分支，通常是 gh-pages Obsidian配置 Hugo配置 内容较多，详见Hugo配置\n待改进 目前copy_draft_posts.py脚本会扫描obsidian所有的文章, 然后拷贝到hugoBlog文件夹下进行构建, 但文章中的引用关系, 比如图片没有处理. 后续是考虑用图床, 还是将图片上传到仓库修复引用路径? 嗯, 待定 由于是拷贝文章到hugoBlog进行构建, 没有在hugoBlog commit并push这些变动, 所以文章的变动是没有版本管理的. 如果加上commit, 那删除时需要手动删除并commit, 好像有点麻烦 文档属性目前需要自己复制并填上相应的信息，理想的情况是借助obsidian模板插件自动生成并填写标题及文档更新时间等 02-29更新 针对第3点, 如果想使hugo中的日期:git生效, 必须把文章提交到仓库才有对应的commit信息. 所以为了显示日期, 在Github Action中加上commit及push的操作. 以后删除需要到hugoBlog仓库中手动删除\nPS: 可以考虑这个actions库来add和commit\n","permalink":"https://destinokm.github.io/posts/tech/obsidian+hugo+github-page%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/","summary":"自己研究的一套以Obsidian为主的写博客方案","title":"Obsidian+Hugo+Github Page搭建博客"},{"content":"缺陷 看Gridea Github，已经很久不更新了，最新版本的0.93还有一个负优化：为了避免OneDriver等工具同步时，会把.git文件夹同步，0.93版本后Git提交记录仅保留最新的一条。\n这简直是灾难性的更新，看issue很多人太久没用了，不明所以更新到0.93后（比如我），点同步后本来是期待从远程拉代码下来更新本地仓库及文章，结果变成将本地的提交强制覆盖原仓库，导致原来的配置、文章全没了，还无法从历史commit恢复，简直了。\n方案 把Gridea仓库Fork下来自己改改，改出这个提交保留commit的功能 降级到0.92版本，代价是后续更新无缘了（但仓库最新的commit停留在2022年，估计也不再更新） 找其它方案，比如用obsidian记录写文章然后同步到博客程序 ","permalink":"https://destinokm.github.io/posts/tech/%E5%90%90%E6%A7%BDgridea/","summary":"试用Gridea并否决该方案","title":"吐槽Gridea"},{"content":"我的需求 部署简单 不想输命令，最好有UI\n插件丰富 像评论、统计啥的插件，可以暂时不用，但要有，不想到时候折腾时自己开发\n解析速度 要快，打开一篇文章花个几秒，花里胡哨的不要。可以结合CDN啥的优化，但不要太复杂，我懒\n版本管理 最好支持使用Github作为仓库进行版本管理，不然出问题回滚不了太蛋疼了，同时可以使用Github Action也会更方便、灵活一些\n隐私设置 文章最好有草稿、私人、公开这几个状态，有些文章不想公开出去\n一键同步 这是额外需求，最好可以像微信公众号同步助手那样支持一次发布，同步到多个平台\n写作环境 只电脑就行，一般也不会在手机或者其它终端写文章，没这个习惯\n多端同步 家里、公司不同终端可以自动同步\n开源框架 hugo 静态博客，结合github托管\nGithub Pages + Hugo 搭建个人博客 - 渣渣的夏天\nHugo + Github Pages 搭建个人博客 | Robin 的个人主页\nhexo 静态博客，据说几百篇文章时会很慢。 因为没有后端，所以没有浏览数统计、没有评论功能、没有搜索功能，要接外部的 没有一键部署，要安装一套环境git + node.js + vscode，然后敲命令部署\nghost 动态博客，同上，而且插件不丰富? 似乎有些槽点\nwordpress 丰富的社区生态及插件，很臃肿，学习成本大些 比较占服务器资源 1G内存 可借助神器WP2Static静态化\nGridea 静态博客，有客户端, 详情看另一篇[[吐槽Gridea]]\n最终方案 Obsidian+Hugo+Github Page搭建博客 | 创果自留地\n","permalink":"https://destinokm.github.io/posts/tech/%E6%8A%98%E8%85%BE%E5%8D%9A%E5%AE%A2/","summary":"闲来无事，折腾博客","title":"折腾博客"},{"content":"安装 1 2 yarn global add @quasar/cli yarn create quasar 编辑.npmrc文件（海外用户可忽略） 由于某些原因，非海外用户在下载Electron有关的包源文件时可能会遇到很多网络问题，所以先修改.npmrc文件添加清华源。\n1 2 3 4 5 6 7 8 # .npmrc文件内容，pnpm相关的是官方设置，不用管 # pnpm-related options shamefully-hoist=true strict-peer-dependencies=false # electron-related options electron_mirror=\u0026#34;https://npm.taobao.org/mirrors/electron/\u0026#34; ELECTRON_BUILDER_BINARIES_MIRROR=\u0026#34;http://npm.taobao.org/mirrors/electron-builder-binaries/\u0026#34; FAQ quasar not found 1 export PATH=\u0026#34;$(yarn global bin):$PATH\u0026#34; 为方便调试与打包，可在package.json的scripts里添加相应指令（dev与build）\n1 2 3 4 5 6 7 8 ... \u0026#34;scripts\u0026#34;: { \u0026#34;test\u0026#34;: \u0026#34;echo \\\u0026#34;No test specified\\\u0026#34; \u0026amp;\u0026amp; exit 0\u0026#34;, \u0026#34;dev\u0026#34;: \u0026#34;quasar dev -m electron\u0026#34;, \u0026#34;build\u0026#34;: \u0026#34;quasar build -m electron\u0026#34;, \u0026#34;gen-icon\u0026#34;: \u0026#34;icongenie g -m electron -i public/icons/favicon-128x128.png\u0026#34; }, ... 参考链接\n","permalink":"https://destinokm.github.io/posts/tech/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6quasar/","summary":"Quasar，基于 Vue.js 的全栈框架","title":"前端框架Quasar"},{"content":"安装virtualenv sudo pip install virtualenv 不加sudo会装到用户文件夹下~/.local sudo pip install virtualenvwrapper 同上\n以下加到.bashrc或.zshrc\n1 2 3 4 export WORKON_HOME=$HOME/.virtualenvs export PROJECT_HOME=$HOME/Devel export VIRTUALENVWRAPPER_SCRIPT=/usr/local/bin/virtualenvwrapper.sh source /usr/local/bin/virtualenvwrapper_lazy.sh ","permalink":"https://destinokm.github.io/posts/tech/virtualenv/","summary":"Virtualenv","title":"Virtualenv"}]