<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>慵懒D大调</title>
    <link>https://destinokm.github.io/</link>
    <description>Recent content on 慵懒D大调</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Tue, 27 Feb 2024 17:42:29 +0800</lastBuildDate>
    <atom:link href="https://destinokm.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Gridea</title>
      <link>https://destinokm.github.io/posts/gridea/</link>
      <pubDate>Tue, 27 Feb 2024 17:42:29 +0800</pubDate>
      <guid>https://destinokm.github.io/posts/gridea/</guid>
      <description>#博客
Gridea 检测远程连接失败_悄悄地努力的博客-CSDN博客_gridea远程连接失败
缺陷 getgridea/gridea: ✍️ A static blog writing client (一个静态博客写作客户端)
看Github仓库，已经很久不更新了，最新版本的0.93还有一个负优化：为了避免OneDriver等工具同步时，会把.git文件夹同步，0.93版本后Git提交记录仅保留最新的一条。
这简直是灾难性的更新，看issue很多人太久没用了，不明所以更新到0.93后（比如我），点同步后本来是期待从远程拉代码下来更新本地仓库及文章，结果变成将本地的提交强制覆盖原仓库，导致原来的配置、文章全没了，还无法从历史commit恢复，简直了。
现在有几种方案：
把Gridea仓库Fork下来自己改改，改出这个提交保留commit的功能
降级到0.92版本，代价是后续更新无缘了（但仓库最新的commit停留在2022年，估计也不再更新）
找其它方案，比如用obsidian记录写文章然后同步到博客程序</description>
    </item>
    <item>
      <title>Gridea</title>
      <link>https://destinokm.github.io/posts/%E5%91%BD%E4%BB%A4%E8%A1%8Czsh/</link>
      <pubDate>Tue, 27 Feb 2024 17:42:29 +0800</pubDate>
      <guid>https://destinokm.github.io/posts/%E5%91%BD%E4%BB%A4%E8%A1%8Czsh/</guid>
      <description>wting/autojump: A cd command that learns - easily navigate directories from the command line PS: centos安装autojump-zsh
sudo apt install zsh sh -c &amp;#34;$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)&amp;#34; # zinit bash -c &amp;#34;$(curl --fail --show-error --silent --location https://raw.githubusercontent.com/zdharma-continuum/zinit/HEAD/scripts/install.sh)&amp;#34; sudo chsh ubuntu # 修改~/.zshrc ZSH_THEME=&amp;#34;afowler&amp;#34; # Load Oh MY Zsh Plugins #git alias（推荐） zinit snippet OMZ::plugins/git/git.plugin.zsh #解压 zinit snippet OMZ::plugins/extract/extract.plugin.zsh #history格式化及alias zinit snippet OMZ::lib/history.zsh #如果命令不存在，会提醒你可能缺失的依赖 zinit snippet OMZ::plugins/command-not-found/command-not-found.plugin.zsh #跳转目录 #sublime alias zinit snippet OMZ::plugins/sublime/sublime.plugin.zsh # Zinit Ice Load #p10k主题 zinit ice depth=1; zinit light romkatv/powerlevel10k #命令高亮 zinit ice lucid wait=&amp;#39;0&amp;#39; atinit=&amp;#39;zpcompinit&amp;#39;; zinit light zdharma/fast-syntax-highlighting #命令补全建议 zinit ice wait lucid atload&amp;#39;_zsh_autosuggest_start&amp;#39;; zinit light zsh-users/zsh-autosuggestions #命令补全 zinit ice lucid wait=&amp;#39;0&amp;#39;; zinit light zsh-users/zsh-completions #Alias提醒 zinit ice lucid wait=&amp;#39;0&amp;#39;; zinit light djui/alias-tips # Export export HOMEBREW_BOTTLE_DOMAIN=&amp;#34;https://mirrors.</description>
    </item>
    <item>
      <title>Gridea</title>
      <link>https://destinokm.github.io/posts/%E6%8A%98%E8%85%BE%E5%8D%9A%E5%AE%A2/</link>
      <pubDate>Tue, 27 Feb 2024 17:42:29 +0800</pubDate>
      <guid>https://destinokm.github.io/posts/%E6%8A%98%E8%85%BE%E5%8D%9A%E5%AE%A2/</guid>
      <description>我的需求 部署简单 不想输命令，最好有UI
插件丰富 像评论、统计啥的插件，我可以暂时不用，但要有，不想到时候折腾时自己开发
解析速度 要快，打开一篇文章花个几秒，花里胡哨的不要。可以结合CDN啥的优化，但不要太复杂，我懒
版本管理 最好支持使用Github作为仓库进行版本管理，不然出问题回滚不了太蛋疼了，同时可以使用Github Action也会更方便、灵活一些
隐私设置 文章最好有草稿、私人、公开这几个状态，有些文章不想公开出去
一键同步 这是额外需求，最好可以像微信公众号同步助手那样支持一次发布，同步到多个平台
写作环境 只电脑就行，一般也不会在手机或者其它终端写文章，没这个习惯
多端同步 家里、公司不同终端可以自动同步
开源框架 hugo 静态博客，结合github托管
Github Pages + Hugo 搭建个人博客 - 渣渣的夏天
Hugo + Github Pages 搭建个人博客 | Robin 的个人主页
hexo 静态博客，据说几百篇文章时会很慢。 因为没有后端，所以没有浏览数统计、没有评论功能、没有搜索功能，要接外部的 没有一键部署，要安装一套环境git + node.js + vscode，然后敲命令部署
ghost 动态博客，同上，而且插件不丰富？似乎有些槽点
wordpress 丰富的社区生态及插件，很臃肿，学习成本大些 比较占服务器资源 1G内存 静态博客的最佳实践？Hugo和Gridea我不用啦！神器WP2Static - LuoJi.men
Gridea 静态博客，有客户端</description>
    </item>
    <item>
      <title>Obsidian&#43;Hugo&#43;Github Page同步方案</title>
      <link>https://destinokm.github.io/posts/obsidian&#43;hugo&#43;github-page%E5%90%8C%E6%AD%A5%E6%96%B9%E6%A1%88/</link>
      <pubDate>Tue, 27 Feb 2024 17:42:29 +0800</pubDate>
      <guid>https://destinokm.github.io/posts/obsidian&#43;hugo&#43;github-page%E5%90%8C%E6%AD%A5%E6%96%B9%E6%A1%88/</guid>
      <description>检出当前提交仓库的最近两次提交的历史记录 检出仓库hugoBlog，检出路径设为hugoBlog 运行python脚本，遍历检出的记录文件，检测是否包含draft=true, 如果是的话, 将该文件复制到hugoBlog的content/posts文件夹下 在hugoBlog目录下运行hugo, 构建静态文件 使用 GitHub Pages 的官方 action，用于部署静态网站到 GitHub Pages name: Build and Deploy Hugo Blog on: push: branches: - main # 触发条件：当 main 分支有代码推送时触发 jobs: build_and_deploy: runs-on: ubuntu-latest steps: - name: Checkout current repository uses: actions/checkout@v4 with: fetch-depth: 1 # 拉取最近1次提交的历史记录 path: obsidian - name: Checkout Hugo Blog repository uses: actions/checkout@v4 with: repository: destinokm/hugoBlog # 仓库地址，例如: username/hugoBlog path: hugoBlog # 仓库的检出路径 ref: &amp;#39;main&amp;#39; token: ${{ secrets.</description>
    </item>
    <item>
      <title>测试</title>
      <link>https://destinokm.github.io/posts/demo/</link>
      <pubDate>Tue, 27 Feb 2024 17:15:26 +0800</pubDate>
      <guid>https://destinokm.github.io/posts/demo/</guid>
      <description>你哈为</description>
    </item>
  </channel>
</rss>
